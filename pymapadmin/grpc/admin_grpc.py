# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: pymapadmin/grpc/admin.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import pymapadmin.grpc.admin_pb2


class AdminBase(abc.ABC):

    @abc.abstractmethod
    async def Ping(self, stream: 'grpclib.server.Stream[pymapadmin.grpc.admin_pb2.PingRequest, pymapadmin.grpc.admin_pb2.PingResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Append(self, stream: 'grpclib.server.Stream[pymapadmin.grpc.admin_pb2.AppendRequest, pymapadmin.grpc.admin_pb2.AppendResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListUsers(self, stream: 'grpclib.server.Stream[pymapadmin.grpc.admin_pb2.ListUsersRequest, pymapadmin.grpc.admin_pb2.UserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetUser(self, stream: 'grpclib.server.Stream[pymapadmin.grpc.admin_pb2.GetUserRequest, pymapadmin.grpc.admin_pb2.UserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SetUser(self, stream: 'grpclib.server.Stream[pymapadmin.grpc.admin_pb2.SetUserRequest, pymapadmin.grpc.admin_pb2.UserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteUser(self, stream: 'grpclib.server.Stream[pymapadmin.grpc.admin_pb2.DeleteUserRequest, pymapadmin.grpc.admin_pb2.UserResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/admin.Admin/Ping': grpclib.const.Handler(
                self.Ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                pymapadmin.grpc.admin_pb2.PingRequest,
                pymapadmin.grpc.admin_pb2.PingResponse,
            ),
            '/admin.Admin/Append': grpclib.const.Handler(
                self.Append,
                grpclib.const.Cardinality.UNARY_UNARY,
                pymapadmin.grpc.admin_pb2.AppendRequest,
                pymapadmin.grpc.admin_pb2.AppendResponse,
            ),
            '/admin.Admin/ListUsers': grpclib.const.Handler(
                self.ListUsers,
                grpclib.const.Cardinality.UNARY_STREAM,
                pymapadmin.grpc.admin_pb2.ListUsersRequest,
                pymapadmin.grpc.admin_pb2.UserResponse,
            ),
            '/admin.Admin/GetUser': grpclib.const.Handler(
                self.GetUser,
                grpclib.const.Cardinality.STREAM_STREAM,
                pymapadmin.grpc.admin_pb2.GetUserRequest,
                pymapadmin.grpc.admin_pb2.UserResponse,
            ),
            '/admin.Admin/SetUser': grpclib.const.Handler(
                self.SetUser,
                grpclib.const.Cardinality.STREAM_STREAM,
                pymapadmin.grpc.admin_pb2.SetUserRequest,
                pymapadmin.grpc.admin_pb2.UserResponse,
            ),
            '/admin.Admin/DeleteUser': grpclib.const.Handler(
                self.DeleteUser,
                grpclib.const.Cardinality.STREAM_STREAM,
                pymapadmin.grpc.admin_pb2.DeleteUserRequest,
                pymapadmin.grpc.admin_pb2.UserResponse,
            ),
        }


class AdminStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Ping = grpclib.client.UnaryUnaryMethod(
            channel,
            '/admin.Admin/Ping',
            pymapadmin.grpc.admin_pb2.PingRequest,
            pymapadmin.grpc.admin_pb2.PingResponse,
        )
        self.Append = grpclib.client.UnaryUnaryMethod(
            channel,
            '/admin.Admin/Append',
            pymapadmin.grpc.admin_pb2.AppendRequest,
            pymapadmin.grpc.admin_pb2.AppendResponse,
        )
        self.ListUsers = grpclib.client.UnaryStreamMethod(
            channel,
            '/admin.Admin/ListUsers',
            pymapadmin.grpc.admin_pb2.ListUsersRequest,
            pymapadmin.grpc.admin_pb2.UserResponse,
        )
        self.GetUser = grpclib.client.StreamStreamMethod(
            channel,
            '/admin.Admin/GetUser',
            pymapadmin.grpc.admin_pb2.GetUserRequest,
            pymapadmin.grpc.admin_pb2.UserResponse,
        )
        self.SetUser = grpclib.client.StreamStreamMethod(
            channel,
            '/admin.Admin/SetUser',
            pymapadmin.grpc.admin_pb2.SetUserRequest,
            pymapadmin.grpc.admin_pb2.UserResponse,
        )
        self.DeleteUser = grpclib.client.StreamStreamMethod(
            channel,
            '/admin.Admin/DeleteUser',
            pymapadmin.grpc.admin_pb2.DeleteUserRequest,
            pymapadmin.grpc.admin_pb2.UserResponse,
        )
