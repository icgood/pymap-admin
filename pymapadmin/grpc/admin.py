# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: admin.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
import grpclib


class ResultCode(betterproto.Enum):
    SUCCESS = 0
    FAILURE = 1


@dataclass
class Result(betterproto.Message):
    code: "ResultCode" = betterproto.enum_field(1)
    response: bytes = betterproto.bytes_field(2)
    key: str = betterproto.string_field(3)


@dataclass
class LoginRequest(betterproto.Message):
    authcid: str = betterproto.string_field(1)
    secret: str = betterproto.string_field(2)
    authzid: str = betterproto.string_field(3)
    token_expiration: float = betterproto.double_field(4)


@dataclass
class LoginResponse(betterproto.Message):
    result: "Result" = betterproto.message_field(1)
    bearer_token: str = betterproto.string_field(2)


@dataclass
class PingRequest(betterproto.Message):
    pass


@dataclass
class PingResponse(betterproto.Message):
    result: "Result" = betterproto.message_field(1)
    pymap_version: str = betterproto.string_field(2)
    pymap_admin_version: str = betterproto.string_field(3)


@dataclass
class AppendRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    sender: str = betterproto.string_field(2)
    recipient: str = betterproto.string_field(3)
    mailbox: str = betterproto.string_field(4)
    data: bytes = betterproto.bytes_field(5)
    flags: List[str] = betterproto.string_field(6)
    when: int = betterproto.uint64_field(7)


@dataclass
class AppendResponse(betterproto.Message):
    result: "Result" = betterproto.message_field(1)
    mailbox: str = betterproto.string_field(2)
    validity: int = betterproto.uint32_field(3)
    uid: int = betterproto.uint32_field(4)


@dataclass
class UserData(betterproto.Message):
    password: str = betterproto.string_field(1)
    params: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass
class GetUserRequest(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass
class SetUserRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    data: "UserData" = betterproto.message_field(2)


@dataclass
class DeleteUserRequest(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass
class UserResponse(betterproto.Message):
    result: "Result" = betterproto.message_field(1)
    username: str = betterproto.string_field(2)
    data: "UserData" = betterproto.message_field(3)


class SystemStub(betterproto.ServiceStub):
    async def ping(self) -> PingResponse:
        request = PingRequest()

        return await self._unary_unary(
            "/admin.System/Ping",
            request,
            PingResponse,
        )

    async def login(
        self,
        *,
        authcid: str = "",
        secret: str = "",
        authzid: str = "",
        token_expiration: float = 0,
    ) -> LoginResponse:
        request = LoginRequest()
        request.authcid = authcid
        request.secret = secret
        request.authzid = authzid
        request.token_expiration = token_expiration

        return await self._unary_unary(
            "/admin.System/Login",
            request,
            LoginResponse,
        )


class MailboxStub(betterproto.ServiceStub):
    async def append(
        self,
        *,
        user: str = "",
        sender: str = "",
        recipient: str = "",
        mailbox: str = "",
        data: bytes = b"",
        flags: List[str] = [],
        when: int = 0,
    ) -> AppendResponse:
        request = AppendRequest()
        request.user = user
        request.sender = sender
        request.recipient = recipient
        request.mailbox = mailbox
        request.data = data
        request.flags = flags
        request.when = when

        return await self._unary_unary(
            "/admin.Mailbox/Append",
            request,
            AppendResponse,
        )


class UserStub(betterproto.ServiceStub):
    async def get_user(self, *, user: str = "") -> UserResponse:
        request = GetUserRequest()
        request.user = user

        return await self._unary_unary(
            "/admin.User/GetUser",
            request,
            UserResponse,
        )

    async def set_user(
        self, *, user: str = "", data: Optional["UserData"] = None
    ) -> UserResponse:
        request = SetUserRequest()
        request.user = user
        if data is not None:
            request.data = data

        return await self._unary_unary(
            "/admin.User/SetUser",
            request,
            UserResponse,
        )

    async def delete_user(self, *, user: str = "") -> UserResponse:
        request = DeleteUserRequest()
        request.user = user

        return await self._unary_unary(
            "/admin.User/DeleteUser",
            request,
            UserResponse,
        )
